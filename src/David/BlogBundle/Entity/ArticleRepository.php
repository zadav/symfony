<?php

namespace David\BlogBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends EntityRepository
{
	public function myFindAll()
	{
		//en paramètre : alias de l'entité
		$queryBuilder = $this->createQueryBuilder('a');

		//methode equivalente mais plus longue
		$queryBuilder = $this->_em->createQueryBuilder()
			->select('a')
			->from($this->_entityName,'a');// Dans un repository, $this->_entityName est le namespace de l'entité gérée
		                                   // Ici, il vaut donc Sdz\BlogBundle\Entity\Article
		
		//On récupère la query à partir du QueryBuilder
		$query = $queryBuilder->getQuery();

		//On récupère les résultats à partir de la Query
		$resultats = $query->getResult();

		//On retourne ces résultats
		return $resultats;

		/*
		//VERSION RACCOURCIE :
		 return $this->createQueryBuilder('a')
                 ->getQuery()
                 ->getResult();
		*/
	}

	public function myFindOne($id){
		// On passe par le QueryBuilder vide de l'EntityManager pour l'exemple
		$qb = $this->_em->createQueryBuilder();

		$qb->select('a')
		   ->from('DavidBlogBundle:Article','a')
		   ->where('a.id = :id')
		   ->setParameter('id',$id);

		return $qb->getQuery()
				  ->getResult();
	}

	public function findByAuteurAndDate($auteur, $annee){
		//On utilise le QueryBuilder créé par le repository directement pour gagner du temps
		// Plus besoin de faire le select() ni le from() par la quite
		$qb = $this->createQueryBuilder('a');
		$qb->where('a.auteur = :auteur')
			->setParameter('auteur',$auteur)
		   ->andWhere('a.date < :annee')
		    ->setParameter('annee',$annee)
		   ->orderBy('a.date','DESC');

		return $qb->getQuery()
					->getResult();
	}

	public function whereCurrentYear(\Doctrine\ORM\QueryBuilder $qb)
	{
	    $qb->andWhere('a.date BETWEEN :debut AND :fin')
	       ->setParameter('debut', new \Datetime(date('Y').'-01-01'))  // Date entre le 1er janvier de cette année
	       ->setParameter('fin',   new \Datetime(date('Y').'-12-31')); // Et le 31 décembre de cette année

	    return $qb;
	}

	public function myFind()
	{
	    $qb = $this->createQueryBuilder('a');

	    // On peut rajouter ce qu'on veut avant
	    $qb->where('a.auteur = :auteur')
	         ->setParameter('auteur', 'winzou');

	    // On applique notre condition
	    $qb = $this->whereCurrentYear($qb);

	    // On peut rajouter ce qu'on veut après
	    $qb->orderBy('a.date', 'DESC');
	    
	    return $qb->getQuery()
	              ->getResult();
	}

	public function getArticleAvecCommentaires()
	{
		$qb = $this->createQueryBuilder('a')
				   ->leftJoin('a.commentaires','c')
				   ->addselect('c');

		return $qb->getQuery 
				  ->getResult();
	}

	  public function getAvecTags(array $nom_tags)
    {
        $qb = $this->createQueryBuilder('a');

        // On fait une jointure sur la table des tags, avec pour alias « t ».
        $qb ->join('a.tags', 't')
            ->where($qb->expr()->in('t.nom', $nom_tags)); // Puis on filtre sur le nom des tags.

        // Enfin, on retourne le résultat.
        return $qb->getQuery()
                   ->getResult();
    }

     public function getTotal()
    {
        $qb = $this->createQueryBuilder('a')
        			->select('count (a)');

        // Enfin, on retourne le résultat.
        return (int)$qb->getQuery()
                   ->getSingleScalarResult();// Utilisation de getSingleScalarResult pour avoir directement le résultat du COUNT
    }
}